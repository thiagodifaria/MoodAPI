# Base Python image
FROM python:3.11-slim

# Metadados
LABEL maintainer="Thiago Developer" \
      description="Sentiment Analysis API with NLP capabilities"

# Definir variáveis de ambiente
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TZ=America/Sao_Paulo \
    LANG=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive

# Diretório de trabalho
WORKDIR /app

# Instalar dependências do sistema necessárias para compilar pacotes Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    wget \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copiar requirements.txt primeiro para aproveitar o cache do Docker
COPY requirements.txt .

# Instalar dependências Python (em etapas para melhor tratamento de falhas)
# 1. Pacotes base
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
# 2. Pacotes NLP problemáticos (específicos primeiro)
RUN pip install --no-cache-dir numpy==1.26.4 \
    && pip install --no-cache-dir fasttext-wheel==0.9.2 \
    && pip install --no-cache-dir langdetect==1.0.9 \
    && pip install --no-cache-dir nltk==3.9.1 \
    && pip install --no-cache-dir "spacy>=3.7.1,<3.8.0" \
    && pip install --no-cache-dir googletrans==4.0.0-rc1 \
    # 3. Restante dos pacotes
    && pip install --no-cache-dir -r requirements.txt

# Baixar modelos spaCy
RUN python -m spacy download en_core_web_sm \
    && python -m spacy download pt_core_news_sm \
    && python -m spacy download es_core_news_sm

# Baixar dados NLTK necessários (adicionado punkt_tab conforme solicitado)
RUN python -c "import nltk; nltk.download('punkt'); nltk.download('punkt_tab'); nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('vader_lexicon')"

# Copiar o código fonte para o container
COPY . .

# Criar diretório para o banco de dados SQLite (se não existir)
RUN mkdir -p /app/data

# Verificar se todos os diretórios necessários existem
RUN mkdir -p /app/app/api/routes \
    && mkdir -p /app/app/core \
    && mkdir -p /app/app/services \
    && mkdir -p /app/app/utils \
    && mkdir -p /app/tests

# Configuração para log
RUN mkdir -p /app/logs \
    && touch /app/logs/api.log \
    && chmod 777 /app/logs/api.log

# Expor a porta que a API irá utilizar
EXPOSE 8000

# Comando para executar a API
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]